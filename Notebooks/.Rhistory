install.packages("tidyverse")
install.packages("magrittr")
library(tidyverse)
criptograma <- c("ibrrgqeaq", "rbgvafanr", "rfznnngfe",
"pqbpcrfvr", "aenbycnbq", "hffpfdnbr",
"bvfrpquav", "efrcydnbh", "gdprhvufv",
"hhnfvrdfr", "ynnygzfnr", "neennnegf",
"bnaviycrf", "gfbvvybnf", "rfgfihay",
"fkbncerny", "qprarffnh", "mhreosrvy",
"fnnrvaqiq")
criptograma
install.pakacges("map")
install.pakacges("purrr")
install.pakcages("purrr")
install.packages("purrr")
library(purrr)
install.packages("stringr")
map(criptograma, str_split)
library(purrr)str_split
str_split
library(tidyverse)
library(purrr)
library(stringr)
map(criptograma, str_split())
map(criptograma, .~ str_split(.))
map(criptograma, function (x) str_split(x))
map(criptograma, function (x) str_split(x, ""))
map(criptograma, function (x) str_split(x, "")) %>% unlist()
map(criptograma, function (x) str_split(x, "")) %>% unlist(., recursive = FALSE)
map(criptograma, function (x) str_split(x, "")) %>%
unlist(., recursive = FALSE) %>%
do.call(rbind)
map(criptograma, function (x) str_split(x, "")) %>%
unlist(., recursive = FALSE) %>%
do.call(rbind, .)
criptograma <- c("ibrrgqeaq", "rbgvafanr", "rfznnngfe",
"pqbpcrfvr", "aenbycnbq", "hffpfdnbr",
"bvfrpquav", "efrcydnbh", "gdprhvufv",
"hhnfvrdfr", "ynnygzfnr", "neennnegf",
"bnaviycrf", "gfbvvybnf", "rfgrfihay",
"fkbncerny", "qprarffnh", "mhreosrvy",
"fnnrvaqiq")
map(criptograma, function (x) str_split(x, "")) %>%
unlist(., recursive = FALSE) %>%
do.call(rbind, .)
criptograma_ <-
map(criptograma, function (x) str_split(x, "")) %>%
unlist(., recursive = FALSE) %>%
do.call(rbind, .)
cripto <- map(criptograma, function (x) str_split(x, "")) %>%
unlist(., recursive = FALSE) %>%
do.call(rbind, .)
cripto
sudoku <- str_split(cadena, "")
cadena <- "fchideabgegbcahdifidagbfhcegbfaciedhaiehfdcgbdhcbegfaihagfihbedbeidhagfccfdegbiha"
sudoku <- str_split(cadena, "")
sudoku
class(cripto)
sudoku <- str_split(cadena, "") %>%
unlist() %>%
matrix(nrow = 9, byrow = T)
sudoku
cripto
sudoku[sudoku == "a"]
sudoku[sudoku == "a", ]
sudoku[sudoku == "a"] <- 1
sudoku
letras_sudoku <- c("a", "b", "c", "d", "e", "f", "g", "h", "i")
for (i in 1:9){
sudoku[sudoku == letras_sudoku[i]] <- i
}
sudoku
cripto
sudoku <- data.matrix(sudoku)
sudoku
sudoku <- as.numeric(sudoku)
sudoku
cadena <- "fchideabgegbcahdifidagbfhcegbfaciedhaiehfdcgbdhcbegfaihagfihbedbeidhagfccfdegbiha"
sudoku <- str_split(cadena, "") %>%
unlist() %>%
matrix(nrow = 9, byrow = T)
letras_sudoku <- c("a", "b", "c", "d", "e", "f", "g", "h", "i")
for (i in 1:9){
sudoku[sudoku == letras_sudoku[i]] <- i
}
sudoku <- as.matrix(sudoku)
sudoku
class(Sudoku) <- "numeric"
class(sudoku) <- "numeric"
sudoku
sudoku
cripto[sudoku[1,:]]
cripto[sudoku[1,]]
cripto[sudoku[,1]]
sudoku
cripto
cripto[1,]
cripto[1,][sudoku[,1]]
cripto[2,][sudoku[,2]]
library(tidyverse)
library(purrr)
library(stringr)
criptograma <- c("ibrrgqeaq", "rbgvafanr", "rfznnngfe",
"pqbpcrfvr", "aenbycnbq", "hffpfdnbr",
"bvfrpquav", "efrcydnbh", "gdprhvufv",
"hhnfvrdfr", "ynnygzfnr", "neennnegf",
"bnaviycrf", "gfbvvybnf", "rfgrfihay",
"fkbncerny", "qprarffnh", "mhreosrvy",
"fnnrvaqiq")
cripto <- map(criptograma, function (x) str_split(x, "")) %>%
unlist(., recursive = FALSE) %>%
do.call(rbind, .)
cadena <- "fchideabgegbcahdifidagbfhcegbfaciedhaiehfdcgbdhcbegfaihagfihbedbeidhagfccfdegbiha"
sudoku <- str_split(cadena, "") %>%
unlist() %>%
matrix(nrow = 9, byrow = T)
letras_sudoku <- c("a", "b", "c", "d", "e", "f", "g", "h", "i")
for (i in 1:9){
sudoku[sudoku == letras_sudoku[i]] <- i
}
class(sudoku) <- "numeric"
library(tidyverse)
library(purrr)
library(stringr)
criptograma <- c("ibrrgqeaq", "rbgvafanr", "rfznnngfe",
"pqbpcrfvr", "aenbycnbq", "hffpfdnbr",
"bvfrpquav", "efrcydnbh", "gdprhvufv",
"hhnfvrdfr", "ynnygzfnr", "neennnegf",
"bnaviycrf", "gfbvvybnf", "rfgrfihay",
"fkbncerny", "qprarffnh", "mhreosrvy",
"fnnrvaqiq")
cripto <- map(criptograma, function (x) str_split(x, "")) %>%
unlist(., recursive = FALSE) %>%
do.call(rbind, .)
cadena <- "fchideabgegbcahdifidagbfhcegbfaciedhaiehfdcgbdhcbegfaihagfihbedbeidhagfccfdegbiha"
sudoku <- str_split(cadena, "") %>%
unlist() %>%
matrix(nrow = 9, byrow = T)
letras_sudoku <- c("a", "b", "c", "d", "e", "f", "g", "h", "i")
for (i in 1:9){
sudoku[sudoku == letras_sudoku[i]] <- i
}
class(sudoku) <- "numeric"
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
library(purrr)
library(stringr)
criptograma <- c("ibrrgqeaq", "rbgvafanr", "rfznnngfe",
"pqbpcrfvr", "aenbycnbq", "hffpfdnbr",
"bvfrpquav", "efrcydnbh", "gdprhvufv",
"hhnfvrdfr", "ynnygzfnr", "neennnegf",
"bnaviycrf", "gfbvvybnf", "rfgrfihay",
"fkbncerny", "qprarffnh", "mhreosrvy",
"fnnrvaqiq")
cripto <- map(criptograma, function (x) str_split(x, "")) %>%
unlist(., recursive = FALSE) %>%
do.call(rbind, .)
cadena <- "fchideabgegbcahdifidagbfhcegbfaciedhaiehfdcgbdhcbegfaihagfihbedbeidhagfccfdegbiha"
sudoku <- str_split(cadena, "") %>%
unlist() %>%
matrix(nrow = 9, byrow = T)
letras_sudoku <- c("a", "b", "c", "d", "e", "f", "g", "h", "i")
for (i in 1:9){
sudoku[sudoku == letras_sudoku[i]] <- i
}
class(sudoku) <- "numeric"
criptograma <- c("ibrrgqeaq", "rbgvafanr", "rfznnngfe",
"pqbpcrfvr", "aenbycnbq", "hffpfdnbr",
"bvfrpquav", "efrcydnbh", "gdprhvufv",
"hhnfvrdfr", "ynnygzfnr", "neennnegf",
"bnaviycrf", "gfbvvybnf", "rfgrfihay",
"fkbncerny", "qprarffnh", "mhreosrvy",
"fnnrvaqiq")
cripto <- map(criptograma, function (x) str_split(x, "")) %>%
unlist(., recursive = FALSE) %>%
do.call(rbind, .)
cadena <- "fchideabgegbcahdifidagbfhcegbfaciedhaiehfdcgbdhcbegfaihagfihbedbeidhagfccfdegbiha"
sudoku <- str_split(cadena, "") %>%
unlist() %>%
matrix(nrow = 9, byrow = T)
letras_sudoku <- c("a", "b", "c", "d", "e", "f", "g", "h", "i")
for (i in 1:9){
sudoku[sudoku == letras_sudoku[i]] <- i
}
class(sudoku) <- "numeric"
cripto
sudoku
library(ggplot2)
setwd("/home/francisco-llaneza/beeva-technology-research-private/analytics/dlib-vs-awsrekognition/Comparison")
read("dlib_times.txt")
read.table("dlib_times.txt")
read.table("dlib_times.txt")
read.txt("dlib_times.txt")
readChar("dlib_times.txt")
readLines("dlib_times.txt")
dlib_times <- readLines("dlib_times.txt")
dlib_times
strsplit(dlib_times, ",")
?strsplit
library(magrittr)
dlib_times %<>% .[2:(len(.)-1)]
dlib_times %<>% .[2:(length(.)-1)]
dlib_times
dlib_times <- readLines("dlib_times.txt")
dlib_times
dlib_times[1]
dlib_times[2]
dlib_times %<>% substr(., 2, length(.)-1)
dlib_times
dlib_times <- readLines("dlib_times.txt")
dlib_times
dlib_times %<>% substr(.[1], 2, length(.)-1)
dlib_times <- readLines("dlib_times.txt")
dlib_times %<>% substr(.[1], 2, length(.[1])-1)
dlib_times[1]
dlib_times <- readLines("dlib_times.txt")
dlib_times %<>% substr(., 2, length(.)-1)
dlib_times
dlib_times <- readLines("dlib_times.txt")
dlib_times
substr(dlib_times, 1, 2)
dlib_times %<>% substr(., 2, nchar(.)-1)
dlib_times
dlib_times <- readLines("dlib_times.txt")
dlib_times %<>% substr(., 2, nchar(.)-1) %>% strsplit(dlib_times, ",")
dlib_times
dlib_times <- readLines("dlib_times.txt")
dlib_times %<>% substr(., 2, nchar(.)-1) %>% strsplit(., ",")
dlib_times
dlib_times <- readLines("dlib_times.txt")
dlib_times %<>% substr(., 2, nchar(.)-1) %>% strsplit(., ",") %>% unlist()
dlib_times
dlib_times <- readLines("dlib_times.txt")
dlib_times %<>% substr(., 2, nchar(.)-1) %>% strsplit(., ",") %>% unlist() %>% as.numeric()
dlib_times
dlib_times <- readLines("dlib_times.txt")
dlib_times <- readLines("dlib_times.txt")
dlib_times %<>% substr(., 2, nchar(.)-1) %>% strsplit(., ",") %>% unlist() %>% as.numeric()
dlib_times
dlib_times
dlib_times <- readLines("dlib_times.txt")
dlib_times
dlib_times %<>% substr(., 2, nchar(.)-1) %>% strsplit(., ",") %>% unlist() %>% as.numeric()
aws_times <- readLines("aws_times.txt")
aws_times %<>% substr(., 2, nchar(.)-1) %>% strsplit(., ",") %>% unlist() %>% as.numeric()
aws_times
data = data.frame(dlib_times = dlib_times, aws_times = aws_times)
data
dlib_times <- readLines("dlib_times.txt")
aws_times <- readLines("aws_times.txt")
dlib_times %<>% substr(., 2, nchar(.)-1) %>% strsplit(., ",") %>% unlist() %>% as.numeric()
aws_times %<>% substr(., 2, nchar(.)-1) %>% strsplit(., ",") %>% unlist() %>% as.numeric()
df_times = data.frame(dlib_times = dlib_times, aws_times = aws_times)
length(dlib_times)
length(aws_times)
aws_times <- readLines("aws_times.txt")
dlib_times %<>% substr(., 2, nchar(.)-1) %>% strsplit(., ",") %>% unlist() %>% as.numeric()
aws_times %<>% substr(., 2, nchar(.)-1) %>% strsplit(., ",") %>% unlist() %>% as.numeric()
df_times = data.frame(times = c(dlib_times, aws_times), software = c(rep(1,length(dlib_times), rep(2,length(aws_times)))
View(df_times)
c(dlib_times, aws_times)
c(rep(1,length(dlib_times), rep(2,length(aws_times))
)
))
c(rep(1,length(dlib_times), rep(2,length(aws_times)))
)
df_times = data.frame(times = c(dlib_times, aws_times), software = c(rep(1,length(dlib_times)), rep(2,length(aws_times))))
View(df_times)
ggplot(aes(df_times)) +
geom_boxplot(aes(x = as.factor(software), y = times))
ggplot(aes(df_times)) +
geom_boxplot(aes(x = factor(software), y = times))
ggplot(aes(df_times, x = factor(software), y = times)) +
geom_boxplot()
ggplot(aes(data = df_times, x = factor(software), y = times)) +
geom_boxplot()
df_times
dlib_times <- readLines("dlib_times.txt")
aws_times <- readLines("aws_times.txt")
dlib_times %<>% substr(., 2, nchar(.)-1) %>% strsplit(., ",") %>% unlist() %>% as.numeric()
aws_times %<>% substr(., 2, nchar(.)-1) %>% strsplit(., ",") %>% unlist() %>% as.numeric()
df_times = data.frame(times = c(dlib_times, aws_times), software = c(rep("dlib",length(dlib_times)), rep("amazon",length(aws_times))))
dlib_times <- readLines("dlib_times.txt")
aws_times <- readLines("aws_times.txt")
dlib_times %<>% substr(., 2, nchar(.)-1) %>% strsplit(., ",") %>% unlist() %>% as.numeric()
aws_times %<>% substr(., 2, nchar(.)-1) %>% strsplit(., ",") %>% unlist() %>% as.numeric()
df_times = data.frame(times = c(dlib_times, aws_times), software = c(rep("dlib",length(dlib_times)), rep("amazon",length(aws_times))))
df_times
df_times$times %>% class()
ggplot(aes(data = df_times, x = factor(software), y = times)) +
geom_boxplot()
rep(c("A","B"), each=200)
?rep
dlib_times <- readLines("dlib_times.txt")
aws_times <- readLines("aws_times.txt")
dlib_times %<>% substr(., 2, nchar(.)-1) %>% strsplit(., ",") %>% unlist() %>% as.numeric()
aws_times %<>% substr(., 2, nchar(.)-1) %>% strsplit(., ",") %>% unlist() %>% as.numeric()
df_times = data.frame(software = factor(rep(c("dlib","amazon"), each = length(dlib_times))), times = c(dlib_times, aws_times))
ggplot(aes(data = df_times, x = software, y = times)) + geom_boxplot()
ggplot(data = df_times, aes(x = software, y = times)) + geom_boxplot()
ggplot(data = df_times, aes(x = software, y = times, fill = software)) + geom_boxplot()
ggplot(data = df_times, aes(x = software, y = times, fill = software)) +
geom_boxplot() +
scale_fill_manual(values=c("#999999", "#E69F00"))
ggplot(data = df_times, aes(x = software, y = times, fill = software)) +
geom_boxplot() +
scale_fill_manual(values=c("#FF0000", "#E69F00"))
ggplot(data = df_times, aes(x = software, y = times, fill = software)) +
geom_boxplot() +
scale_fill_manual(values=c("#FF0000", "#004E89"))
ggplot(data = df_times, aes(x = software, y = times, fill = software)) +
geom_boxplot() +
scale_fill_manual(values=c("#FF0000", "#0000FF"))
ggplot(data = df_times, aes(x = software, y = times, fill = software)) +
geom_boxplot() +
scale_fill_manual(values=c("#FF0000", "#1155CC"))
ggplot(data = df_times, aes(x = software, y = times, fill = software)) +
geom_boxplot() +
scale_fill_manual(values=c("#FF0000", "#1155CC")) +
title("Api time comparison")
ggplot(data = df_times, aes(x = software, y = times, fill = software)) +
geom_boxplot() +
scale_fill_manual(values=c("#FF0000", "#1155CC")) +
ggtitle("Api time comparison")
ggplot(data = df_times, aes(x = software, y = times, fill = software)) +
geom_boxplot() +
scale_fill_manual(values=c("#FF0000", "#1155CC")) +
ggtitle("Response times comparison")
ggplot(data = df_times, aes(x = software, y = times, fill = software)) +
geom_boxplot() +
scale_fill_manual(values=c("#FF0000", "#1155CC")) +
ggtitle("API Response times")
df_times = data.frame(application = factor(rep(c("dlib","amazon"), each = length(dlib_times))), times = c(dlib_times, aws_times))
ggplot(data = df_times, aes(x = software, y = times, fill = software)) +
geom_boxplot() +
scale_fill_manual(values=c("#FF0000", "#1155CC")) +
ggtitle("API Response times")
ggplot(data = df_times, aes(x = application, y = times, fill = software)) +
geom_boxplot() +
scale_fill_manual(values=c("#FF0000", "#1155CC")) +
ggtitle("API Response times")
ggplot(data = df_times, aes(x = application, y = times, fill = application)) +
geom_boxplot() +
scale_fill_manual(values=c("#FF0000", "#1155CC")) +
ggtitle("API Response times")
df_times = data.frame(application = factor(rep(c("dlib","amazon rekognition"), each = length(dlib_times))), times = c(dlib_times, aws_times))
ggplot(data = df_times, aes(x = application, y = times, fill = application)) +
geom_boxplot() +
scale_fill_manual(values=c("#FF0000", "#1155CC")) +
ggtitle("API Response times")
ggplot(data = df_times, aes(x = application, y = times, fill = application)) +
geom_boxplot() +
scale_fill_manual(values=c("#FF0000", "#1155CC")) +
ggtitle("Face Detection API Response Times")
aws_times
ggplot(data = df_times, aes(x = application, y = times, fill = application)) +
geom_boxplot() +
scale_fill_manual(values=c("#FF0000", "#1155CC")) +
ggtitle("Face Detection API Response Times (in seconds)")
ggplot(data = df_times, aes(x = application, y = times, fill = application)) +
geom_boxplot() +
scale_fill_manual(values=c("#FF0000", "#1155CC")) +
ggtitle("Face Detection API Response Times (sec)")
ggplot(data = df_times, aes(x = application, y = times, fill = application)) +
geom_boxplot() +
scale_fill_manual(values=c("#FF0000", "#1155CC")) +
ggtitle("Face Detection API Response Times (seconds)")
ggplot(data = df_times, aes(x = application, y = times, fill = application)) +
geom_boxplot() +
scale_fill_manual(values=c("#FF0000", "#1155CC")) +
ggtitle("Face Detection API Response Times (Seconds)")
ggplot(data = df_times, aes(x = application, y = times, fill = application)) +
geom_boxplot() +
scale_fill_manual(values=c("#FF0000", "#1155CC")) +
ggtitle("Face Detection API Response Times (in seconds)")
median(dlib_times)
median(aws_times)
median(aws_times)/median(dlib_times)
0.8*1.5
1.5*100
1.5/100
median(aws_times) - median(dlib_times)
(median(aws_times) - median(dlib_times))/median(dlib_times)
